
# MySQL Database Backup and Recovery Demonstration

## Project Overview

This project demonstrates the essential process of backing up a MySQL database and restoring it in case of failure or data loss. This is a critical skill for maintaining data integrity and ensuring business continuity for any database-driven application, including modern Gen Z projects.

## Database Details

* **Database Name:** `instagram`
* **MySQL User:** `root`
* **MySQL Host:** `localhost:3306`
* **MySQL Version:** MySQL Server 8.0

---

## 1. Database Backup Process

This section details how to create a comprehensive backup of the `instagram` database, encompassing both its schema (table structures, indexes, constraints) and its data.

### 1.1. Prerequisites

* **Operating System:** Windows (Command Prompt)
* **Command Prompt:** Must be run **As Administrator** to allow writing the backup file in system directories like `Program Files`.
* **MySQL Root Password:** The password for your MySQL `root` user.
* **MySQL `bin` Directory Path:** The directory containing `mysqldump.exe` (e.g., `C:\Program Files\MySQL\MySQL Server 8.0\bin`).

### 1.2. Step-by-Step Backup Procedure

1.  **Open Command Prompt as Administrator:**
    * Search for "cmd" in the Windows Start Menu.
    * Right-click on "Command Prompt" and select "Run as administrator". Confirm any User Account Control (UAC) prompts.

2.  **Navigate to the MySQL `bin` Directory:**
    * In the Command Prompt, change the current directory to where your MySQL executables (like `mysqldump.exe`) are located. Use the `cd` command with double quotes around the path if it contains spaces.

    ```cmd
    cd "C:\Program Files\MySQL\MySQL Server 8.0\bin"
    ```
    *(Adjust the path if your MySQL installation is in a different location).*

3.  **Execute the Backup Command:**
    * Run the `mysqldump` utility to export your database. This command directs the database content into a specified SQL file.

    ```cmd
    mysqldump -u root -p instagram > instagram_backup.sql
    ```
    * `-u root`: Specifies the MySQL username for the connection.
    * `-p`: Prompts you securely to enter the password for the specified user.
    * `instagram`: The name of the database you intend to back up.
    * `>`: This redirection operator sends the output of `mysqldump` (the SQL dump) into the specified file.
    * `instagram_backup.sql`: The name of the file where the complete database backup will be saved.

4.  **Enter MySQL Password:**
    * When prompted with `Enter password:`, type your MySQL `root` user's password. For security, characters will not appear as you type. Press Enter after typing.

5.  **Verify Backup File Creation:**
    * Once the command prompt returns, the backup process is complete.
    * Open File Explorer and navigate to `C:\Program Files\MySQL\MySQL Server 8.0\bin` (or the directory where you executed the command).
    * Confirm the presence of `instagram_backup.sql`. Check its file size; it should not be 0 KB. You can also open it with a text editor to confirm it contains SQL `CREATE TABLE` and `INSERT` statements.

### 1.3. Backup Script (`backup_instagram.bat`)

This is a simple Windows batch script to automate the backup process.

```batch
@echo off
REM --- Backup Script for MySQL Instagram Database ---
REM --- Ensure this script is run as Administrator ---

SET MYSQL_BIN_PATH="C:\Program Files\MySQL\MySQL Server 8.0\bin"
SET DB_NAME=instagram
SET DB_USER=root
SET BACKUP_FILE_NAME=instagram_backup.sql
SET BACKUP_PATH="%MYSQL_BIN_PATH%\%BACKUP_FILE_NAME%"

echo.
echo ===========================================
echo Starting MySQL Database Backup
echo ===========================================
echo.
echo Database: %DB_NAME%
echo User: %DB_USER%
echo Backup File: %BACKUP_FILE_NAME%
echo Saving to: %BACKUP_PATH%
echo.

REM Navigate to MySQL bin directory
cd %MYSQL_BIN_PATH%

REM Execute mysqldump
%MYSQL_BIN_PATH%\mysqldump.exe -u %DB_USER% -p %DB_NAME% > %BACKUP_FILE_NAME%

REM Check for errors
IF %ERRORLEVEL% NEQ 0 (
    echo.
    echo ERROR: Backup failed!
    echo Please check your MySQL password, ensure MySQL server is running,
    echo and verify that the Command Prompt is running as Administrator.
) ELSE (
    echo.
    echo Backup completed successfully!
    echo The backup file is located at: %BACKUP_PATH%
)

echo.
echo ===========================================
echo Backup Process Finished
echo ===========================================
echo.
pause
2. Database Recovery (Restore) Process
This section demonstrates how to restore the instagram database from a previously created instagram_backup.sql file. This is crucial for disaster recovery, moving databases, or restoring data after accidental deletions.

2.1. Prerequisites
Operating System: Windows (Command Prompt).

Command Prompt: Must be run As Administrator.

MySQL Server: A running MySQL Server instance (even if empty or corrupted).

Backup File: The instagram_backup.sql file must be accessible (ideally in the MySQL bin directory for simplicity, or provide its full path).

MySQL Root Password: The password for your MySQL root user.

MySQL bin Directory Path: The directory containing mysql.exe.

2.2. Step-by-Step Restore Procedure
Open Command Prompt as Administrator:

As before, open CMD by right-clicking and selecting "Run as administrator".

Navigate to the MySQL bin Directory:

Change your directory to the MySQL bin folder, where mysql.exe is located and where your instagram_backup.sql file typically resides for this process.

DOS

cd "C:\Program Files\MySQL\MySQL Server 8.0\bin"
Optional: Drop Existing Database (Use with Extreme Caution!)

If the instagram database already exists and is corrupted, or if you want a clean restore, you might need to drop it first. This action is irreversible and will permanently delete all current data in the instagram database.

DOS

mysql -u root -p -e "DROP DATABASE IF EXISTS instagram;"
Enter your MySQL password when prompted.

Create a New (Empty) Database:

A fresh, empty database is required to import the backup into.

DOS

mysql -u root -p -e "CREATE DATABASE instagram;"
Enter your MySQL password when prompted.

Execute the Restore Command:

This command reads the SQL statements from your backup file and executes them against the instagram database, recreating the schema and inserting the data.

DOS

mysql -u root -p instagram < instagram_backup.sql
-u root: Specifies the MySQL username.

-p: Prompts securely for the password.

instagram: The name of the database to which the backup will be restored.

<: This redirection operator feeds the contents of the SQL file as input to the mysql.exe client.

instagram_backup.sql: The path to your backup file.

Enter MySQL Password:

When prompted Enter password:, type your MySQL root user's password and press Enter.

Verify Restoration:

After the command prompt returns, the restoration is complete.

You can connect to your MySQL server using MySQL Workbench or the mysql command-line client to confirm that the instagram database now contains all its tables and data.

Example verification commands:

DOS

mysql -u root -p instagram -e "SHOW TABLES;"
mysql -u root -p instagram -e "SELECT COUNT(*) FROM your_table_name_here;"
2.3. Recovery Script (restore_instagram.bat)
This is a simple Windows batch script to automate the restoration process. Be extremely cautious when running this script as it can delete existing data.

Code snippet

@echo off
REM --- Restore Script for MySQL Instagram Database ---
REM --- Ensure this script is run as Administrator ---

SET MYSQL_BIN_PATH="C:\Program Files\MySQL\MySQL Server 8.0\bin"
SET DB_NAME=instagram
SET DB_USER=root
SET BACKUP_FILE_NAME=instagram_backup.sql
SET BACKUP_PATH="%MYSQL_BIN_PATH%\%BACKUP_FILE_NAME%"

echo.
echo ===========================================
echo Starting MySQL Database Restore
echo ===========================================
echo.
echo Database: %DB_NAME%
echo User: %DB_USER%
echo Source Backup File: %BACKUP_FILE_NAME%
echo Restoring from: %BACKUP_PATH%
echo.

REM Navigate to MySQL bin directory
cd %MYSQL_BIN_PATH%

REM --- WARNING: This will drop and recreate the database. Use with EXTREME CAUTION! ---
echo.
echo ********************************************************************
echo !!! WARNING: This script will DROP and RECREATE the '%DB_NAME%' database. !!!
echo !!! All existing data in '%DB_NAME%' will be PERMANENTLY LOST.    !!!
echo !!! Press Ctrl+C to CANCEL if you do not wish to proceed.          !!!
echo ********************************************************************
echo.
pause

REM Drop existing database
echo Dropping existing database (if it exists)...
%MYSQL_BIN_PATH%\mysql.exe -u %DB_USER% -p -e "DROP DATABASE IF EXISTS %DB_NAME%;"
IF %ERRORLEVEL% NEQ 0 (
    echo ERROR: Failed to drop database. Please check password or permissions.
    goto :eof
)
echo Database '%DB_NAME%' dropped successfully (if it existed).

REM Create a new empty database
echo Creating new empty database: %DB_NAME%...
%MYSQL_BIN_PATH%\mysql.exe -u %DB_USER% -p -e "CREATE DATABASE %DB_NAME%;"
IF %ERRORLEVEL% NEQ 0 (
    echo ERROR: Failed to create database. Please check password or permissions.
    goto :eof
)
echo Database '%DB_NAME%' created successfully.

REM Import the backup file
echo Importing data from %BACKUP_FILE_NAME% into %DB_NAME%...
%MYSQL_BIN_PATH%\mysql.exe -u %DB_USER% -p %DB_NAME% < %BACKUP_FILE_NAME%

REM Check for errors after import
IF %ERRORLEVEL% NEQ 0 (
    echo.
    echo ERROR: Restore failed!
    echo Please check the backup file, your MySQL password, and MySQL server status.
) ELSE (
    echo.
    echo Restore completed successfully!
    echo Database '%DB_NAME%' has been restored from '%BACKUP_FILE_NAME%'.
)

echo.
echo ===========================================
echo Restore Process Finished
echo ===========================================
echo.
pause
